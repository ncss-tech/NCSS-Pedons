# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2021-09-20 08:25:54
"""
import arcpy

def Lab2filegdb():  # Lab2filegdb_template

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Model Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
        SDMonline_dbo_lab_area = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_area"
        labexports = "E:\\projects\\labexports"
        ncss_labdata_gdb_2_ = "E:\\projects\\labexports\\ncss_labdata.gdb"
        SDMonline_dbo_lab_preparation = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_preparation"
        SDMonline_dbo_lab_xray_and_thermal = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_xray_and_thermal"
        SDMonline_dbo_lab_mineralogy_glass_count = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_mineralogy_glass_count"
        SDMonline_dbo_lab_physical_properties = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_physical_properties"
        SDMonline_dbo_lab_pedon = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_pedon"
        SDMonline_dbo_lab_site = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_site"
        SDMonline_dbo_lab_webmap = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_webmap"
        SDMonline_dbo_lab_major_and_trace_elements_and_oxides = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_major_and_trace_elements_and_oxides"
        SDMonline_dbo_lab_layer = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_layer"
        SDMonline_dbo_lab_rosetta_key = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_rosetta_key"
        SDMonline_dbo_lab_chemical_properties = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_chemical_properties"
        SDMonline_dbo_lab_calculations_including_estimates_and_default_values = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_calculations_including_estimates_and_default_values"
        SDMonline_dbo_lab_method_code = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_method_code"
        SDMonline_dbo_lab_analysis_procedure = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_analysis_procedure"
        SDMonline_dbo_lab_analyte = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_analyte"
        SDMonline_dbo_lab_combine_nasis_ncss = "E:\\projects\\labexports\\sdmonline.sde\\SDMonline.dbo.lab_combine_nasis_ncss"

        # Process: Delete (Delete) (management)
        with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
            Delete_Succeeded = arcpy.management.Delete(in_data=[ncss_labdata_gdb_2_], data_type="")[0]

        # Process: Create File Geodatabase (Create File Geodatabase) (management)
        if Delete_Succeeded:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                ncss_labdata_gdb = arcpy.management.CreateFileGDB(out_folder_path=labexports, out_name="ncss_labdata", out_version="CURRENT")[0]

        # Process: Copy Rows (17) (Copy Rows) (management)
        lab_area = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_area"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_area, out_table=lab_area, config_keyword="")

        # Process: Add Attribute Index (11) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_area_indexed = arcpy.management.AddIndex(in_table=lab_area, fields=["area_key"], index_name="labarea_key_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Copy Rows (5) (Copy Rows) (management)
        lab_preparation = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_preparation"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_preparation, out_table=lab_preparation, config_keyword="")

        # Process: Add Attribute Index (3) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_preparation_indexed = arcpy.management.AddIndex(in_table=lab_preparation, fields=["prep_code"], index_name="lapprep_code_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Copy Rows (Copy Rows) (management)
        lab_xray_and_thermal = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_xray_and_thermal"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_xray_and_thermal, out_table=lab_xray_and_thermal, config_keyword="")

        # Process: Add Attribute Index (2) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_xray_and_thermal_3_ = arcpy.management.AddIndex(in_table=lab_xray_and_thermal, fields=["layer_key"], index_name="xray_layerkey_index", unique="UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (18) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_xray_and_thermal_2_ = arcpy.management.AddIndex(in_table=lab_xray_and_thermal_3_, fields=["labsampnum"], index_name="labxray_labsamp_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (19) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_xray_and_thermal_indexed = arcpy.management.AddIndex(in_table=lab_xray_and_thermal_2_, fields=["prep_code"], index_name="labxray_prepcode_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (Create Relationship Class) (management)
        xpreparation2xray_and_thermal = "E:\\projects\\labexports\\ncss_labdata.gdb\\xpreparation2xray_and_thermal"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_preparation_indexed, destination_table=lab_xray_and_thermal_indexed, out_relationship_class=xpreparation2xray_and_thermal, relationship_type="SIMPLE", forward_label="lab_xray_and_thermal", backward_label="lab_preparation", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="prep_code", origin_foreign_key="prep_code", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (8) (Copy Rows) (management)
        lab_mineralogy_glass_count = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_mineralogy_glass_count"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_mineralogy_glass_count, out_table=lab_mineralogy_glass_count, config_keyword="")

        # Process: Add Attribute Index (7) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_mineralogy_glass_count_2_ = arcpy.management.AddIndex(in_table=lab_mineralogy_glass_count, fields=["labsampnum"], index_name="lapmgc_sampno_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (22) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_mineralogy_glass_count_indexed = arcpy.management.AddIndex(in_table=lab_mineralogy_glass_count_2_, fields=["prep_code"], index_name="lmgc_prepcode_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (2) (Create Relationship Class) (management)
        xpreparation2mineralogy_glass_count = "E:\\projects\\labexports\\ncss_labdata.gdb\\xpreparation2mineralogy_glass_count"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_preparation_indexed, destination_table=lab_mineralogy_glass_count_indexed, out_relationship_class=xpreparation2mineralogy_glass_count, relationship_type="SIMPLE", forward_label="lab_mineralogy_glass_count", backward_label="lab_preparation", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="prep_code", origin_foreign_key="prep_code", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (6) (Copy Rows) (management)
        lab_physical_properties = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_physical_properties"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_physical_properties, out_table=lab_physical_properties, config_keyword="")

        # Process: Add Attribute Index (5) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_physical_properties_2_ = arcpy.management.AddIndex(in_table=lab_physical_properties, fields=["labsampnum"], index_name="labpp_sampno_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (21) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_physical_properties_indexed = arcpy.management.AddIndex(in_table=lab_physical_properties_2_, fields=["prep_code"], index_name="labpp_prepcode_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (3) (Create Relationship Class) (management)
        xpreparation2physical_properties = "E:\\projects\\labexports\\ncss_labdata.gdb\\xpreparation2physical_properties"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_preparation_indexed, destination_table=lab_physical_properties_indexed, out_relationship_class=xpreparation2physical_properties, relationship_type="SIMPLE", forward_label="lab_physical_properties", backward_label="lab_preparation", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="prep_code", origin_foreign_key="prep_code", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (7) (Copy Rows) (management)
        lab_pedon = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_pedon"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_pedon, out_table=lab_pedon, config_keyword="")

        # Process: Add Attribute Index (6) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_pedon_2_ = arcpy.management.AddIndex(in_table=lab_pedon, fields=["pedon_key"], index_name="labpedon_key_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (16) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_pedon_indexed = arcpy.management.AddIndex(in_table=lab_pedon_2_, fields=["site_key"], index_name="labpedon_sitekey_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Copy Rows (2) (Copy Rows) (management)
        lab_site = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_site"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_site, out_table=lab_site, config_keyword="")

        # Process: Add Attribute Index (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_site_indexed = arcpy.management.AddIndex(in_table=lab_site, fields=["site_key"], index_name="site_key_index", unique="UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (4) (Create Relationship Class) (management)
        xpedon2site = "E:\\projects\\labexports\\ncss_labdata.gdb\\xpedon2site"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_pedon_indexed, destination_table=lab_site_indexed, out_relationship_class=xpedon2site, relationship_type="SIMPLE", forward_label="lab_site", backward_label="lab_pedon", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="site_key", origin_foreign_key="site_key", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (3) (Copy Rows) (management)
        lab_webmap = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_webmap"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_webmap, out_table=lab_webmap, config_keyword="")

        # Process: Add Attribute Index (20) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_webmap_indexed = arcpy.management.AddIndex(in_table=lab_webmap, fields=["pedon_Key"], index_name="labwebmap_pedonkey_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (5) (Create Relationship Class) (management)
        xpedon2webmap = "E:\\projects\\labexports\\ncss_labdata.gdb\\xpedon2webmap"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_pedon_indexed, destination_table=lab_webmap_indexed, out_relationship_class=xpedon2webmap, relationship_type="SIMPLE", forward_label="lab_webmap", backward_label="lab_pedon", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="pedon_key", origin_foreign_key="pedon_Key", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (10) (Copy Rows) (management)
        lab_major_and_trace_elements_and_oxides = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_major_and_trace_elements_and_oxides"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_major_and_trace_elements_and_oxides, out_table=lab_major_and_trace_elements_and_oxides, config_keyword="")

        # Process: Add Attribute Index (9) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_major_and_trace_elements_and_oxides_2_ = arcpy.management.AddIndex(in_table=lab_major_and_trace_elements_and_oxides, fields=["labsampnum"], index_name="lmt_sampno_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (23) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_major_and_trace_elements_and_oxides_indexed = arcpy.management.AddIndex(in_table=lab_major_and_trace_elements_and_oxides_2_, fields=["prep_code"], index_name="lmt_prepcode_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (6) (Create Relationship Class) (management)
        xpreparation2major_and_trace_elements_and_oxides = "E:\\projects\\labexports\\ncss_labdata.gdb\\xpreparation2major_and_trace_elements_and_oxides"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_preparation_indexed, destination_table=lab_major_and_trace_elements_and_oxides_indexed, out_relationship_class=xpreparation2major_and_trace_elements_and_oxides, relationship_type="SIMPLE", forward_label="lab_major_and_trace_elements_and_oxides", backward_label="lab_preparation", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="prep_code", origin_foreign_key="prep_code", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (13) (Copy Rows) (management)
        lab_layer = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_layer"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_layer, out_table=lab_layer, config_keyword="")

        # Process: Add Attribute Index (15) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_layer_2_ = arcpy.management.AddIndex(in_table=lab_layer, fields=["labsampnum"], index_name="lablayer_sampnum_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (17) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_layer_indexed = arcpy.management.AddIndex(in_table=lab_layer_2_, fields=["layer_key"], index_name="lablayer_key_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Copy Rows (4) (Copy Rows) (management)
        lab_rosetta_key = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_rosetta_key"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_rosetta_key, out_table=lab_rosetta_key, config_keyword="")

        # Process: Add Attribute Index (4) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_rosetta_key_indexed = arcpy.management.AddIndex(in_table=lab_rosetta_key, fields=["layer_key"], index_name="rosetta_layer_key_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (7) (Create Relationship Class) (management)
        xlayer2rosetta_key = "E:\\projects\\labexports\\ncss_labdata.gdb\\xlayer2rosetta_key"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_layer_indexed, destination_table=lab_rosetta_key_indexed, out_relationship_class=xlayer2rosetta_key, relationship_type="SIMPLE", forward_label="lab_rosetta_key", backward_label="lab_layer", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="layer_key", origin_foreign_key="layer_key", destination_primary_key="", destination_foreign_key="")

        # Process: Create Relationship Class (8) (Create Relationship Class) (management)
        xlayer2xray_and_thermal = "E:\\projects\\labexports\\ncss_labdata.gdb\\xlayer2xray_and_thermal"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_layer_indexed, destination_table=lab_xray_and_thermal_indexed, out_relationship_class=xlayer2xray_and_thermal, relationship_type="SIMPLE", forward_label="lab_xray_and_thermal", backward_label="lab_layer", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="labsampnum", origin_foreign_key="labsampnum", destination_primary_key="", destination_foreign_key="")

        # Process: Create Relationship Class (9) (Create Relationship Class) (management)
        xlayer2physical_properties = "E:\\projects\\labexports\\ncss_labdata.gdb\\xlayer2physical_properties"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_layer_indexed, destination_table=lab_physical_properties_indexed, out_relationship_class=xlayer2physical_properties, relationship_type="SIMPLE", forward_label="lab_physical_properties", backward_label="lab_layer", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="labsampnum", origin_foreign_key="labsampnum", destination_primary_key="", destination_foreign_key="")

        # Process: Create Relationship Class (10) (Create Relationship Class) (management)
        xlayer2mineralogy_glass_count = "E:\\projects\\labexports\\ncss_labdata.gdb\\xlayer2mineralogy_glass_count"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_layer_indexed, destination_table=lab_mineralogy_glass_count_indexed, out_relationship_class=xlayer2mineralogy_glass_count, relationship_type="SIMPLE", forward_label="lab_mineralogy_glass_count", backward_label="lab_layer", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="labsampnum", origin_foreign_key="labsampnum", destination_primary_key="", destination_foreign_key="")

        # Process: Create Relationship Class (11) (Create Relationship Class) (management)
        xlayer2major_and_trace_elements_and_oxides = "E:\\projects\\labexports\\ncss_labdata.gdb\\xlayer2major_and_trace_elements_and_oxides"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_layer_indexed, destination_table=lab_major_and_trace_elements_and_oxides_indexed, out_relationship_class=xlayer2major_and_trace_elements_and_oxides, relationship_type="SIMPLE", forward_label="lab_major_and_trace_elements_and_oxides", backward_label="lab_layer", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="labsampnum", origin_foreign_key="labsampnum", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (16) (Copy Rows) (management)
        lab_chemical_properties = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_chemical_properties"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_chemical_properties, out_table=lab_chemical_properties, config_keyword="")

        # Process: Add Attribute Index (10) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_chemical_properties_2_ = arcpy.management.AddIndex(in_table=lab_chemical_properties, fields=["labsampnum"], index_name="lcp_sampno_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (24) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_chemical_properties_indexed = arcpy.management.AddIndex(in_table=lab_chemical_properties_2_, fields=["prep_code"], index_name="lcp_prepcode_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (12) (Create Relationship Class) (management)
        xlayer2chemical_properties = "E:\\projects\\labexports\\ncss_labdata.gdb\\xlayer2chemical_properties"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_layer_indexed, destination_table=lab_chemical_properties_indexed, out_relationship_class=xlayer2chemical_properties, relationship_type="SIMPLE", forward_label="lab_chemical_properties", backward_label="lab_layer", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="labsampnum", origin_foreign_key="labsampnum", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (14) (Copy Rows) (management)
        lab_calculations_including_estimates_and_default_values = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_calculations_including_estimates_and_default_values"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_calculations_including_estimates_and_default_values, out_table=lab_calculations_including_estimates_and_default_values, config_keyword="")

        # Process: Add Attribute Index (13) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_calculations_including_estimates_and_default_values_2_ = arcpy.management.AddIndex(in_table=lab_calculations_including_estimates_and_default_values, fields=["labsampnum"], index_name="lce_sampno_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (25) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_calculations_including_estimates_and_default_values_indexed = arcpy.management.AddIndex(in_table=lab_calculations_including_estimates_and_default_values_2_, fields=["prep_code"], index_name="lce_prepcode_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (13) (Create Relationship Class) (management)
        xlayer2calculations_including_estimates_and_default_values = "E:\\projects\\labexports\\ncss_labdata.gdb\\xlayer2calculations_including_estimates_and_default_values"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_layer_indexed, destination_table=lab_calculations_including_estimates_and_default_values_indexed, out_relationship_class=xlayer2calculations_including_estimates_and_default_values, relationship_type="SIMPLE", forward_label="lab_calculations_including_estimates_and_default_values", backward_label="lab_layer", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="labsampnum", origin_foreign_key="labsampnum", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (9) (Copy Rows) (management)
        lab_method_code = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_method_code"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_method_code, out_table=lab_method_code, config_keyword="")

        # Process: Add Attribute Index (8) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_method_code_indexed = arcpy.management.AddIndex(in_table=lab_method_code, fields=["procedure_key"], index_name="lmc_prodkey_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Copy Rows (12) (Copy Rows) (management)
        lab_analysis_procedure = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_analysis_procedure"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_analysis_procedure, out_table=lab_analysis_procedure, config_keyword="")

        # Process: Add Attribute Index (14) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_analysis_procedure_indexed = arcpy.management.AddIndex(in_table=lab_analysis_procedure, fields=["procedure_key"], index_name="labprod_key_index", unique="UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (14) (Create Relationship Class) (management)
        xmethod_code2analysis_procedure = "E:\\projects\\labexports\\ncss_labdata.gdb\\xmethod_code2analysis_procedure"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_method_code_indexed, destination_table=lab_analysis_procedure_indexed, out_relationship_class=xmethod_code2analysis_procedure, relationship_type="SIMPLE", forward_label="lab_analysis_procedure", backward_label="lab_method_code", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="procedure_key", origin_foreign_key="procedure_key", destination_primary_key="", destination_foreign_key="")

        # Process: Copy Rows (15) (Copy Rows) (management)
        lab_analyte = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_analyte"
        if Delete_Succeeded and ncss_labdata_gdb:
            with arcpy.EnvManager(scratchWorkspace=r"E:\projects\catalog\catalog.gdb", workspace=r"E:\projects\catalog\catalog.gdb"):
                arcpy.management.CopyRows(in_rows=SDMonline_dbo_lab_analyte, out_table=lab_analyte, config_keyword="")

        # Process: Add Attribute Index (12) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_analyte_indexed = arcpy.management.AddIndex(in_table=lab_analyte, fields=["analyte_key"], index_name="lab_analyte_key_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (15) (Create Relationship Class) (management)
        xmethod_code2analyte = "E:\\projects\\labexports\\ncss_labdata.gdb\\xmethod_code2analyte"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_method_code_indexed, destination_table=lab_analyte_indexed, out_relationship_class=xmethod_code2analyte, relationship_type="SIMPLE", forward_label="lab_analyte", backward_label="lab_method_code", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="procedure_key", origin_foreign_key="analyte_key", destination_primary_key="", destination_foreign_key="")

        # Process: Create Relationship Class (16) (Create Relationship Class) (management)
        xpreparation2chemical_properties = "E:\\projects\\labexports\\ncss_labdata.gdb\\xpreparation2chemical_properties"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_preparation_indexed, destination_table=lab_chemical_properties_indexed, out_relationship_class=xpreparation2chemical_properties, relationship_type="SIMPLE", forward_label="lab_chemical_properties", backward_label="lab_preparation", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="prep_code", origin_foreign_key="prep_code", destination_primary_key="", destination_foreign_key="")

        # Process: Create Relationship Class (17) (Create Relationship Class) (management)
        xpreparation2calculations_including_estimates_and_default_values = "E:\\projects\\labexports\\ncss_labdata.gdb\\xpreparation2calculations_including_estimates_and_default_values"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_preparation_indexed, destination_table=lab_calculations_including_estimates_and_default_values_indexed, out_relationship_class=xpreparation2calculations_including_estimates_and_default_values, relationship_type="SIMPLE", forward_label="lab_calculations_including_estimates_and_default_values", backward_label="lab_preparation", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="prep_code", origin_foreign_key="prep_code", destination_primary_key="", destination_foreign_key="")

        # Process: Make XY Event Layer (2) (Make XY Event Layer) (management)
        lab_combine_nasis_ncss = "SDMonline.dbo.lab_combine_nasis_ncss_Layer_event"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.MakeXYEventLayer(table=SDMonline_dbo_lab_combine_nasis_ncss, in_x_field="longitude_decimal_degrees", in_y_field="latitude_decimal_degrees", out_layer=lab_combine_nasis_ncss, spatial_reference="GEOGCS[\"GCS_WGS_1984\",DATUM[\"D_WGS_1984\",SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]];-400 -400 1000000000;-100000 10000;-100000 10000;8.98315284119521E-09;0.001;0.001;IsHighPrecision", in_z_field="")

        # Process: Copy Features (Copy Features) (management)
        lab_combine_nasis_ncss_2_ = "E:\\projects\\labexports\\ncss_labdata.gdb\\lab_combine_nasis_ncss"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CopyFeatures(in_features=lab_combine_nasis_ncss, out_feature_class=lab_combine_nasis_ncss_2_, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Add Attribute Index (26) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_combine_nasis_ncss_3_ = arcpy.management.AddIndex(in_table=lab_combine_nasis_ncss_2_, fields=["pedon_key"], index_name="lcnn_oedonkey_index", unique="UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (27) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_combine_nasis_ncss_4_ = arcpy.management.AddIndex(in_table=lab_combine_nasis_ncss_3_, fields=["site_key"], index_name="lcnn_sitekey_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (28) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_combine_nasis_ncss_5_ = arcpy.management.AddIndex(in_table=lab_combine_nasis_ncss_4_, fields=["peiid"], index_name="lcnn_peiid_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Add Attribute Index (29) (Add Attribute Index) (management)
        if Delete_Succeeded and ncss_labdata_gdb:
            lab_combine_nasis_ncss_indexed = arcpy.management.AddIndex(in_table=lab_combine_nasis_ncss_5_, fields=["pedlabsampnum"], index_name="lcnn_sampno_index", unique="NON_UNIQUE", ascending="ASCENDING")[0]

        # Process: Create Relationship Class (18) (Create Relationship Class) (management)
        xcombine_nasis_ncss2pedon = "E:\\projects\\labexports\\ncss_labdata.gdb\\xcombine_nasis_ncss2pedon"
        if Delete_Succeeded and ncss_labdata_gdb:
            arcpy.management.CreateRelationshipClass(origin_table=lab_combine_nasis_ncss_indexed, destination_table=lab_pedon_indexed, out_relationship_class=xcombine_nasis_ncss2pedon, relationship_type="SIMPLE", forward_label="lab_pedon", backward_label="lab_combine_nasis_ncss", message_direction="NONE", cardinality="ONE_TO_MANY", attributed="NONE", origin_primary_key="pedon_key", origin_foreign_key="pedon_key", destination_primary_key="", destination_foreign_key="")

if __name__ == '__main__':
    Lab2filegdb()
